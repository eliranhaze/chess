currently:
[v] new move ordering that uses mvv - testing in colab
[x] new checkmate/stalemate check - currently in engine3.py - to test next
	- tested, worse. not sure why - maybe there's a bug and it doesn't detect some checkmates/stalmates
	  early enough?
[v] currently testing again the checkmates issue with a fix of the original bug (engine3) and a fix of a second bug (engine3_1) - see more notes in results file
	- 3_1 version does work and is better
[v] killer moves
[x] retry that max sorting - more simply
	- no luck so far
[x] 200 delta pruning?
	- no significant differnece
[x] SEE in regular move ordering - salvage negative mvv captures that have >0 SEE
	- didn't seem promising
[v] SEE - currently running
	- was about the same, committing anyway
[v] history heuristic ordering - implemented (engine_history2) and waiting to run
	- looks good
[x] -500 vs -10000 killer value
	- -10000 was found to result in more prunning, but was somehow a bit slower - so check actual games
	- was slightly worse in testing
[x] syzygy tb
	- results inconclusive, not committing for now...
	- should revisit and recheck later
	- note also that the tb code doesn't slow down search... so there really should be no downside - with
	  correct implementation this should be pure elo gain
	- can also consider the simplest approach first, of just probing at root and filtering any non-optimal moves, and then doing search as normal with no probe
[v] LMR
	- NOTE: should also not reduce when in PV node, also don't reduce PROMOTIONS
[_] kp val - remember that this was found to be worse than without - recheck

next:
- still having memory leakage issues - ram went way high on colab, but strangely open after second game series vs stockfish, maybe 150 games in...
	- maybe i should have a log with hash table lengths printed after every game, or maybe even every move..
	- maybe try just adding gc.collect to eval.py first, just to make sure it's not that - also run once with prints to make sure everything is cleaned out at least once
- King safety - in engine_ks file - need to run game
- Tapered eval - also see related comment in piece_eval about endgame
- Work on more evaluation stuff, maybe consider pieces attacked/defended as well
- need to integrate syzygy tb - some draws in selfplay seem to result from lack of endgame knowledge - also can add draw offer if in drawn position instead of going on for 150 moves...

todo:
- QS when in check - see discussion: http://talkchess.com/forum3/viewtopic.php?f=7&t=47162&start=10

note:
- all the movegen stuff... everything turns out to be slower... MUCH slower... idk why. even when in ipy it's faster, in speedtest it a lot slower, even when just the move generation is measured
	- I think the reason has to do with pypy optimization: the more something runs
	  the faster it becomes, so if what was previously just one function is now
 	  two different ones, they might runs slower overall even if they are individually faster
